# Original work by Security-Onion-Solutions
# URL: https://github.com/Security-Onion-Solutions/securityonion
# Modified by: Matt Cundari


# Set the firewall to allow SSH
firewall --enabled --port=22:tcp

# Install Mode
install

# Lock the root account
rootpw --lock

# Force this to use the shadow file
auth --useshadow --passalgo=sha512

# Install via Text Mode
text

# Disable firstboot. We don't have a GUI
firstboot --disable

# Set the keyboard
keyboard us

# Set the language
lang en_US

# Turn on SELinux
selinux --enforcing

# No X Windows please
skipx

# Installation logging level
logging --level=info

# Reboot after install
reboot

# System timezone to UTC
timezone --isUtc Etc/UTC



{{ host }}
network --device={{ mgmt_device }} --onboot=on --noipv6 --bootproto=static --ip={{ ip }} --activate --netmask={{ netmask }} --gateway={{ gateway }} --nameserver={{ dns }} --hostname {{ hostname }}

#%include /tmp/uefi
%include /tmp/part-include

%pre

#!/bin/sh
exec < /dev/tty6 > /dev/tty6

# Switch to the tty so we can type stuff
chvt 6


# Get the megarams
mem=$(($(free -m | grep Mem | awk '{print $2}')+2000))

{% if custom_part_table is defined and custom_part_table%}
cat << EOF >> /tmp/part-include

{{ custom_part_table }}

EOF

{% else %}
# Set drives to 0 for now
NUMDRIVES=0

# Block device directory
DIR="/sys/block"

# Minimum drive size in GIGABYTES
MINSIZE=99

# Set the root drive to blank for now
ROOTDRIVE=""

if [ -d /sys/firmware/efi ]; then
  is_uefi=true
fi

TEMPDRIVE=/tmp/part-include

# Ask some basic questions

for DEV in sda sdb sdc sdd hda hdb hdc hdd vda vdb vdc vdd nvme; do
  if [ -d $DIR/$DEV ]; then

    # Find removeable devices so we don't install on them
    REMOVABLE=$(cat $DIR/$DEV/removable)

    if (( $REMOVABLE == 0 )); then
      NUMDRIVES=$((NUMDRIVES+1))
      SIZE=$(cat $DIR/$DEV/size)
      GB=$(($SIZE/2**21))
    fi
  fi
done

# If there is a single drive move forward
if [ $NUMDRIVES -lt 2 ]; then
  for DEV in sda sdb sdc sdd hda hdb hdc hdd vda vdb vdc vdd nvme; do
    if [ -d $DIR/$DEV ]; then
      REMOVABLE=$(cat $DIR/$DEV/removable)
      if (( $REMOVABLE == 0 )); then
        SIZE=$(cat $DIR/$DEV/size)
        GB=$(($SIZE/2**21))
        if [ $GB -gt $MINSIZE ]; then
          ROOTDRIVE=$DEV
        else
          echo "Not enough space to install Security Onion. You need at least $MINSIZE GB to proceed"
          read drivetoosmall
        fi
      fi
    fi
  done

  ROOTSIZE=$(($GB/3))

  # Set the volume size to 300GB if it's larger than 300GB
  if [ $ROOTSIZE -gt 300 ]; then
    ROOTPART=300
  else
  # If there isn't at least 300GB set it to what is there.
    ROOTPART=$ROOTSIZE
  fi

# Determine if we need to use gpt
  if [ $GB -gt 1900 ]; then
    parted -s /dev/$ROOTDRIVE mklabel gpt
  fi
  echo 'zerombr' > $TEMPDRIVE
  echo -e "clearpart --all --drives=$ROOTDRIVE --initlabel" >> $TEMPDRIVE
  if [ ! $is_uefi ]; then
  echo -e "bootloader --location=mbr --driveorder=$ROOTDRIVE" >> $TEMPDRIVE
  echo -e "part biosboot --fstype=biosboot --size=1 --ondisk=$ROOTDRIVE" >> $TEMPDRIVE
  echo -e "part /boot --asprimary --fstype=xfs --size=500 --ondisk=$ROOTDRIVE" >> $TEMPDRIVE
  fi
  if [ $is_uefi ]; then
  echo -e "part /boot/efi --asprimary --fstype="fat32" --size=1024 --ondisk=$ROOTDRIVE" >> $TEMPDRIVE
  echo -e "part /boot --fstype=xfs --size=500 --ondisk=$ROOTDRIVE" >> $TEMPDRIVE
  fi
  echo -e "part pv.1 --size 1 --grow --fstype=xfs --ondrive=$ROOTDRIVE" >> $TEMPDRIVE
  echo -e "volgroup system pv.1" >> $TEMPDRIVE
  echo -e "logvol swap --vgname system --size=8192 --name=swap" >> $TEMPDRIVE
  echo -e "logvol /tmp --fstype xfs --vgname system --size=2000 --name=tmp --fsoptions=\"nodev,nosuid,noexec\"" >> $TEMPDRIVE
  echo -e "logvol / --fstype xfs --vgname system --size=$(($ROOTPART*1000)) --name=root" >> $TEMPDRIVE
  echo -e "logvol /nsm --fstype xfs --vgname system --grow --size=1 --name=nsm" >> $TEMPDRIVE

else
  echo "Multiple drives detected.  Let's answer some questions."

  #If there's more than one drive we need to make some choices
  NUMDRIVES=0
  while [ -z $ROOTDRIVE ]
  do
    echo -e "Device\tSize"
    for DEV in sda sdb sdc sdd hda hdb hdc hdd vda vdb vdc vdd ; do
      if [ -d $DIR/$DEV ]; then
        REMOVABLE=$(cat $DIR/$DEV/removable)
        if (( $REMOVABLE == 0 )); then
          NUMDRIVES=$((NUMDRIVES+1))
          SIZE=$(cat $DIR/$DEV/size)
          GB=$(($SIZE/2**21))
          echo -e "$DEV\t$(($SIZE/2**21))GB"
        fi
      fi
    done

  echo "There are $NUMDRIVES available disk(s)"

    echo "Which device would you like to use as the operating system filesystem (must be larger than $MINSIZE GB):"
    read rootchoice
    if [ -d $DIR/$rootchoice ]; then
      REMOVABLE=$(cat $DIR/$rootchoice/removable)
      if (( $REMOVABLE == 0 )); then
        SIZE=$(cat $DIR/$rootchoice/size)
        GB=$(($SIZE/2**21))
        if [ $GB -gt $MINSIZE ]; then
          echo -e "$rootchoice\t$(($SIZE/2**21))GB - OS Drive"
          ROOTDRIVE=$rootchoice
        else
          echo "Available volume does not meet size requirements.  Please provide a volume greater than $MINSIZE GB"
          NUMDRIVES=0
        fi
      else
        echo "That is a removable drive. Please provide a device name for a fixed disk"
        NUMDRIVES=0
      fi
    else
      echo "That device does not exist.  Please pick one of the above listed devices"
      NUMDRIVES=0
    fi
  done
  SAMEDRIVE=""
  NSMDRIVE=""
  while [ -z $SAMEDRIVE ]
  do
    echo "Would you like to use the same device for NSM storage? (yes/no)"
    read SAMEDRIVE
    if [ "$SAMEDRIVE" == "yes" ]; then
      NSMDRIVE=$ROOTDRIVE
      echo -e "$rootchoice\t$(($SIZE/2**21))GB - NSM Drive"
    elif [ "$SAMEDRIVE" == "no" ]; then
      NUMDRIVES=0
      while [ -z $NSMDRIVE ]
      do
        echo -e "Device\tSize"
        for DEV in sda sdb sdc sdd hda hdb hdc hdd vda vdb vdc vdd ; do
          if [ -d $DIR/$DEV ]; then
            REMOVABLE=$(cat $DIR/$DEV/removable)
            if (( $REMOVABLE == 0 )); then
              NUMDRIVES=$((NUMDRIVES+1))
              SIZE=$(cat $DIR/$DEV/size)
              GB=$(($SIZE/2**21))
              if [ "$DEV" != "$ROOTDRIVE" ]; then
                echo -e "$DEV\t$(($SIZE/2**21))GB"
              fi
            fi
          fi
        done
        echo "Which device would you like to use for NSM storage:"
        read whichnsm
        if [ -d $DIR/$whichnsm ]; then
          REMOVABLE=$(cat $DIR/$whichnsm/removable)
          if (( $REMOVABLE == 0 )); then
            echo -e "$whichnsm\t$(($SIZE/2**21))GB - NSM Drive"
            NSMDRIVE=$whichnsm
            PCAPSIZE=$(cat $DIR/$NSMDRIVE/size)
            PCAPGB=$(($PCAPSIZE/2**21))
          else
            echo "That is a removable drive. Please provide a device name for a fixed disk"
            NUMDRIVES=0
          fi
        else
          echo "That device does not exist.  Please pick one of the above listed devices"
          NUMDRIVES=0
        fi
      done
    else
      SAMEDRIVE=""
    fi
  done
  ROOTRAWSIZE=$(cat $DIR/$ROOTDRIVE/size)
  ROOTGB=$(($ROOTRAWSIZE/2**21))
  if [ "$ROOTDRIVE" == "$NSMDRIVE" ]; then
    ROOTSIZE=$(($ROOTGB/3))
    if [ $ROOTSIZE -gt 300 ]; then
      ROOTPART=300
    else
      ROOTPART=$ROOTSIZE
    fi
  else
    ROOTPART=$ROOTGB
  fi
  if [ $ROOTGB -gt 1900 ]; then
    parted -s /dev/$ROOTDRIVE mklabel gpt
  fi
  echo 'zerombr' > $TEMPDRIVE
  if [ "$ROOTDRIVE" == "$NSMDRIVE" ]; then
    echo -e "clearpart --all --drives=$ROOTDRIVE" >> $TEMPDRIVE
  else
    echo -e "clearpart --all --drives=$ROOTDRIVE,$NSMDRIVE --initlabel" >> $TEMPDRIVE
  fi
  if [ "$ROOTDRIVE" == "$NSMDRIVE" ]; then
    if [ ! $is_uefi ]; then
      echo -e "bootloader --location=mbr --driveorder=$ROOTDRIVE" >> $TEMPDRIVE
      echo -e "part biosboot --fstype=biosboot --size=1" >> $TEMPDRIVE
      echo -e "part /boot --asprimary --fstype=xfs --size=500 --ondisk=$ROOTDRIVE" >> $TEMPDRIVE
    else
      echo -e "part /boot/efi --fstype="fat32" --size=1024 --ondisk=$ROOTDRIVE" >> $TEMPDRIVE
      echo -e "part /boot --fstype=xfs --size=500 --ondisk=$ROOTDRIVE" >> $TEMPDRIVE
    fi  
  else
    if [ ! $is_uefi ]; then
      echo -e "bootloader --location=mbr --driveorder=$ROOTDRIVE,$NSMDRIVE" >> $TEMPDRIVE
      echo -e "part biosboot --fstype=biosboot --size=1" >> $TEMPDRIVE
      echo -e "part /boot --asprimary --fstype=ext4 --size=500 --ondisk=$ROOTDRIVE" >> $TEMPDRIVE
    else
      echo -e "part /boot/efi --fstype="fat32" --size=1024 --ondisk=$ROOTDRIVE" >> $TEMPDRIVE
      echo -e "part /boot --fstype=ext4 --size=500 --ondisk=$ROOTDRIVE" >> $TEMPDRIVE
    fi
  fi
  echo -e "part pv.1 --size 1 --grow --fstype=xfs --ondrive=$ROOTDRIVE" >> $TEMPDRIVE
  echo -e "volgroup system pv.1" >> $TEMPDRIVE
  if [ "$ROOTDRIVE" == "$NSMDRIVE" ]; then
    echo -e "logvol / --fstype xfs --vgname system --size=$(($ROOTPART*1000)) --name=root" >> $TEMPDRIVE
    echo -e "logvol /nsm --fstype xfs --vgname system --grow --size=1 --name=nsm" >> $TEMPDRIVE
  else
    if [ $PCAPGB -gt 1900 ]; then
      parted -s /dev/$NSMDRIVE mklabel gpt
    fi
    echo -e "part pv.2 --size 1 --grow --fstype=xfs --ondrive=$NSMDRIVE" >> $TEMPDRIVE
    echo -e "volgroup nsm pv.2" >> $TEMPDRIVE
    echo -e "logvol /nsm --fstype xfs --vgname nsm --grow --size=1 --name=nsm" >> $TEMPDRIVE
    echo -e "logvol / --fstype xfs --vgname system --grow --size=1 --name=root" >> $TEMPDRIVE
  fi
fi

{% endif %}


manufacturer=$(dmidecode -s system-manufacturer)
family=$(dmidecode -s system-family)


INSTALL=yes
PWMATCH=yes
SOUSER={{ config.so_user }}
PASSWORD=automation
  
echo "PRODUCT=AUTO" >> /tmp/variables.txt
echo "SOUSER={{ config.so_user }}" >> /tmp/variables.txt
echo "PASSWORD=automation" >> /tmp/variables.txt

{#
if [[ "$manufacturer" == "Security Onion Solutions" && "$family" == "Automated" ]]; then
  INSTALL=yes
  PWMATCH=yes
  SOUSER=onion
  echo "PRODUCT=$product" >> /tmp/variables.txt
  echo "SOUSER={{ config.so_user }}" >> /tmp/variables.txt
  echo "PASSWORD=automation" >> /tmp/variables.txt
fi

while [[ "$INSTALL" != "yes" ]]; do
  clear
  echo "###########################################"
  echo "##          ** W A R N I N G **          ##"
  echo "##    _______________________________    ##"
  echo "##                                       ##"
  echo "##  Installing the Security Onion ISO    ##"
  echo "## on this device will DESTROY ALL DATA  ##"
  echo "##            and partitions!            ##"
  echo "##                                       ##"
  echo "##      ** ALL DATA WILL BE LOST **      ##"
  echo "###########################################"
  echo "Do you wish to continue? (Type the entire word 'yes' to proceed.) "
  read INSTALL
done
#}

userPattern="^[a-z_]([a-z0-9_-]{0,31}|[a-z0-9_-]{0,30}\$)$"
firstAttempt=1
invalidUsers=("root bin daemon adm lp sync shutdown halt mail operator games ftp nobody systemd-network dbus polkitd sshd postfix chrony socore soremote ntp tcpdump elasticsearch stenographer suricata zeek curator kratos kibana elastalert ossecm ossecr ossec logstash")
while [[ ! {{ config.so_user }} =~ $userPattern ]]; do
  echo ""
  if [ $firstAttempt -eq 1 ]; then
    echo "A new administrative user will be created. This user will be used for setting up and administering Security Onion."
  else
    echo "The provided username is not valid, try again."
  fi
  echo ""
  echo -n "Enter an administrative username: "
  read SOUSER
  firstAttempt=0
  if [[ " ${invalidUsers[@]} " =~ " ${SOUSER} " ]]; then
    SOUSER=
  fi
done

while [ $PWMATCH != yes ]; do
  echo ""
  echo "Let's set a password for the {{ config.so_user }} user:"
  echo ""
  echo -n "Enter a password: "
  PASSWORD1=''
  while IFS= read -r -s -n1 char; do
    [[ -z $char ]] && { printf '\n'; break; } # ENTER pressed; output \n and break.
    if [[ $char == $'\x7f' ]]; then # backspace was pressed
      # Remove last char from output variable.
      [[ -n $PASSWORD1 ]] && PASSWORD1=${PASSWORD1%?}
      # Erase '*' to the left.
      printf '\b \b'
    else
      # Add typed char to output variable.
      PASSWORD1+=$char
      # Print '*' in its stead.
      printf '*'
    fi
  done

  echo -n "Re-enter the password: "
  PASSWORD2=''
  while IFS= read -r -s -n1 char; do
    [[ -z $char ]] && { printf '\n'; break; } # ENTER pressed; output \n and break.
    if [[ $char == $'\x7f' ]]; then # backspace was pressed
      # Remove last char from output variable.
      [[ -n PASSWORD2 ]] && PASSWORD2=${PASSWORD2%?}
      # Erase '*' to the left.
      printf '\b \b'
    else
      # Add typed char to output variable.
      PASSWORD2+=$char
      # Print '*' in its stead.
      printf '*'
    fi
  done

  if [ $PASSWORD1 == $PASSWORD2 ]; then
    echo PASSWORD=$PASSWORD1 >> /tmp/variables.txt
    echo SOUSER={{ config.so_user }} >> /tmp/variables.txt
    PWMATCH=yes
  else
    echo "Passwords don't match. Press enter to try again. "
    read -p
  fi
done
echo "FINISHED=Done" >> /tmp/variables.txt
exec < /dev/tty1 > /dev/tty1
chvt 1
%end

%post --nochroot --log /root/postnochrootinstall.log
cp /tmp/variables.txt /mnt/sysimage/tmp/variables.txt
mkdir /mnt/sysimage/root/SecurityOnion
mkdir -p /mnt/sysimage/nsm/docker-registry/docker
mkdir -p /mnt/sysimage/nsm/repo
rsync -avh --exclude 'TRANS.TBL' /run/install/repo/SecurityOnion/* /mnt/sysimage/root/SecurityOnion/
rsync -avh --exclude 'TRANS.TBL' /run/install/repo/docker/* /mnt/sysimage/nsm/docker-registry/docker/
rsync -avh --exclude 'TRANS.TBL' /run/install/repo/Packages/* /mnt/sysimage/nsm/repo/
chmod +x /mnt/sysimage/root/SecurityOnion/setup/so-setup

%end

%post --log /root/postinstall.log
source /tmp/variables.txt
rm -f /tmp/variables.txt



mkdir /root/.ssh/
touch /root/.ssh/known_hosts
chmod -R 700 /root/.ssh

{% if config.inject_ssh_keys is defined and config.inject_ssh_keys %}

echo "{{ keys.public_key }}" > /root/.ssh/so.key.pub
echo "{{ keys.private_key }}" | base64 -d > /root/.ssh/so.key {# as b64 #}
echo >> /root/.ssh/so.key


chmod 0600 /root/.ssh/so.key
chmod 0644 /root/.ssh/so.key.pub
{% endif %}

{% if is_manager is defined and is_manager%}
groupadd --gid 947 soremote
useradd -m --uid 947  --gid 947 --home-dir /home/soremote soremote

{% if config.inject_ssh_keys is defined and inject_ssh_keys %}
mkdir /home/soremote/.ssh
chmod 700 /home/soremote/.ssh

echo "{{ keys.public_key }}" > /home/soremote/.ssh/authorized_keys
chmod 0600 /home/soremote/.ssh/authorized_keys
chown -R soremote:soremote /home/soremote/.ssh
{% endif %}
{% endif %}


useradd {{ config.so_user }}
cp -Rv /root/SecurityOnion /home/{{ config.so_user }}/
chown -R {{ config.so_user }}:{{ config.so_user }} /home/{{ config.so_user }}/SecurityOnion/
chmod +x /home/{{ config.so_user }}/SecurityOnion/setup/so-setup

echo {{ config.so_user }}:{{ config.pt_password }} | chpasswd --crypt-method=SHA512
echo "{{ config.so_user }}   ALL=(ALL)       ALL" >> /etc/sudoers
echo "{{ config.so_user }}   ALL=(ALL) NOPASSWD: /home/{{ config.so_user }}/SecurityOnion/setup/so-setup" >> /etc/sudoers
echo "{{ config.so_user }}   ALL=(ALL) NOPASSWD: /usr/sbin/auto_setup" >> /etc/sudoers

{% if config.configure_hosts_file is defined and config.configure_hosts_file %}
echo "{{ config.manager[0].ip }} {{ config.manager[0].hostname }}" >> /etc/hosts
{% endif %}

echo "{{ auto_setup }}" | base64 -d > /usr/bin/auto_setup {# as b64 #}
chmod 0755 /usr/bin/auto_setup

cp '/home/{{ config.so_user }}/SecurityOnion/setup/automation/{{ hostname }}' '/home/{{ config.so_user }}/SecurityOnion/setup/automation/answer_file'

# SSHD Banner
touch /etc/ssh/sshd-banner
echo "##########################################" > /etc/ssh/sshd-banner
echo "##########################################" >> /etc/ssh/sshd-banner
echo "###                                    ###" >> /etc/ssh/sshd-banner
echo "###   UNAUTHORIZED ACCESS PROHIBITED   ###" >> /etc/ssh/sshd-banner
echo "###                                    ###" >> /etc/ssh/sshd-banner
echo "##########################################" >> /etc/ssh/sshd-banner
echo "##########################################" >> /etc/ssh/sshd-banner

# Set the SSHD banner
echo "Banner /etc/ssh/sshd-banner" >> /etc/ssh/sshd_config

if [ -z $PRODUCT ]; then
  exec < /dev/tty6 > /dev/tty6
  chvt 6
  clear
  echo "Initial Install Complete. Press [Enter] to reboot!"
  read -p "Initial Install Complete. Press [Enter] to reboot!"
  exec < /dev/tty1 > /dev/tty1
  chvt 1
fi
%end

%packages --nobase
@core
%end
